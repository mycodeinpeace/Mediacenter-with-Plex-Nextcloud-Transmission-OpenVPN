#!/bin/bash

# Call it with two parameters.
# First paramether is the path for configuration files. Use absolute path
#   ex: /home/pi/mediaserver
# Second paramether is the path for data files. Use absolute path
#   ex: /mnt/mediaserver-data

./delete.sh $1 $2
echo "### Deleting the previous configurations, data, and containers are DONE ###"

# Incase temp.env has windows linebreaks, it converts it to linux standard.
tr -d '\r' < temp.env > ./.env

# Make users and group
echo "### Creating users and groups... ###"
sudo useradd nextcloud -u 13001
sudo useradd ddclient -u 13002
sudo useradd nginx -u 13003
sudo useradd transmission -u 13004
sudo useradd plex -u 13005
sudo groupadd mediacenter -g 13000
sudo usermod -a -G mediacenter nextcloud
sudo usermod -a -G mediacenter transmission
sudo usermod -a -G mediacenter plex

# Make directories
echo "### Creating directories... ###"
# mkdir –p Creates a directory structure with the missing parent directories (if any)
# mkdir –v Creates a directory in the current location
sudo mkdir -pv $1/docker/{nextcloud,ddclient,nginx,transmission,plex}-config
# nginx
sudo mkdir -pv $1/docker/nginx-config/data
sudo mkdir -pv $1/docker/nginx-config/letsencrypt
sudo mkdir -pv $1/docker/nginx-config/mysql
# nextcloud
sudo mkdir -pv $1/docker/nextcloud-config/mysql
sudo mkdir -pv $2/nextcloud
# plex
sudo mkdir -pv $2/plex/library
sudo mkdir -pv $2/plex/tvseries
sudo mkdir -pv $2/plex/movies

# Set permissions
echo "### Setting directory permissions... ###"
sudo chmod -R 775 $2/
sudo chown -R $(id -u):mediacenter $2/
sudo chown -R nextcloud:mediacenter $1/docker/nextcloud-config
sudo chown -R ddclient:mediacenter $1/docker/ddclient-config
sudo chown -R nginx:mediacenter $1/docker/nginx-config
sudo chown -R transmission:mediacenter $1/docker/transmission-config
sudo chown -R plex:mediacenter $1/docker/plex-config

# Generate random usernames and passwords for databases
echo "### Generating MySQL credentials... ###"
NGINX_DB_MYSQL_USER=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 8 ; echo)
NGINX_DB_MYSQL_PASSWORD=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20 ; echo)
NGINX_MYSQL_ROOT_PASSWORD=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20 ; echo)
NEXTCLOUD_MYSQL_ROOT_PASSWORD=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20 ; echo)
NEXTCLOUD_MYSQL_PASSWORD=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20 ; echo)

# Populate the .env file for Docker Compose
echo "### Adding autogenerated configurations to .env... ###"
echo "UID=$(id -u)" >> .env
echo "ROOT_CONFIG_PATH=$1" >> .env
echo "ROOT_DATA_PATH=$2" >> .env
echo "NGINX_DB_MYSQL_USER=${NGINX_DB_MYSQL_USER}" >> .env
echo "NGINX_DB_MYSQL_PASSWORD=${NGINX_DB_MYSQL_PASSWORD}" >> .env
echo "NGINX_MYSQL_ROOT_PASSWORD=${NGINX_MYSQL_ROOT_PASSWORD}" >> .env
echo "NEXTCLOUD_MYSQL_ROOT_PASSWORD=${NEXTCLOUD_MYSQL_ROOT_PASSWORD}" >> .env
echo "NEXTCLOUD_MYSQL_PASSWORD=${NEXTCLOUD_MYSQL_PASSWORD}" >> .env
echo "PUID=$(id -u www-data)" >> .env # Sets the user id who will run transmission
echo "PGID=$(id -g www-data)" >> .env # Sets the group id for the transmission user

# Copy the configuration files
echo "### Configuring DDclient... ###"
sudo cp ddclient.conf $1/docker/ddclient-config

echo "### Starting the services... ###"
sudo docker-compose -f docker-compose.yml up -d ddclient
sudo docker-compose -f docker-compose.yml up -d nginx-proxy-manager-db
sudo docker-compose -f docker-compose.yml up -d nginx-proxy-manager-app
sudo docker-compose -f docker-compose.yml up -d nextcloud-db
sleep 2 # Wait for database
echo "### Starting the nextcloud... ###"
sudo docker-compose -f docker-compose.yml up -d nextcloud
echo "### Waiting 2 mins for nextcloud to be up... ###"
sleep 120 # Wait for nexcloud installation

export $(grep -v '^#' .env | grep 'NEXTCLOUD_ADMIN_USER') # Read .env file and export NEXTCLOUD_ADMIN_USER to create the below additional folders.
FOLDER_NAME_FOR_DOCKERCOMPOSE=${PWD##*/} # to assign to a variable
FOLDER_NAME_FOR_DOCKERCOMPOSE=${FOLDER_NAME_FOR_DOCKERCOMPOSE:-/} # to correct for the case where PWD=/

echo "### Creating directories for Transmission... ###"
sudo mkdir $2/nextcloud/data/${NEXTCLOUD_ADMIN_USER}/files/Downloads
sudo chown -R www-data $2/nextcloud/data/${NEXTCLOUD_ADMIN_USER}/files/Downloads

echo "### Starting Transmission... ###"
sudo docker-compose -f docker-compose.yml up -d transmission-openvpn
sleep 5
sudo chown -R www-data $2/nextcloud/data/${NEXTCLOUD_ADMIN_USER}/files/Downloads

echo "### Syncing new folders to nextcloud... ###"
sudo docker exec -ti --user www-data ${FOLDER_NAME_FOR_DOCKERCOMPOSE}_nextcloud_1 /var/www/html/occ files:scan --all

echo "### Creating directories for Plex... ###"
sudo mkdir $2/nextcloud/data/${NEXTCLOUD_ADMIN_USER}/files/Movies
sudo mkdir $2/nextcloud/data/${NEXTCLOUD_ADMIN_USER}/files/TVShows
sudo chown -R www-data $2/nextcloud/data/${NEXTCLOUD_ADMIN_USER}/files

echo "### Syncing new folders to nextcloud... ###"
sudo docker exec -ti --user www-data ${FOLDER_NAME_FOR_DOCKERCOMPOSE}_nextcloud_1 /var/www/html/occ files:scan --all

echo "### Starting Plex... ###"
sudo docker-compose -f docker-compose.yml up -d plex

# Cron job for Nextcloud to sync local files from Transmission
echo "### Starting Cron service... ###"
sudo service cron start

# Remove the old cron job
sudo crontab -l | grep -v "*/5 * * * * ${CURRENT_PATH}/syncfileswithnextcloud.sh"  | sudo crontab -

echo "### Creating Cron service to sync new files to nextcloud every 5 minutes... ###"
> syncfileswithnextcloud.sh # empty the script file
# Create the script file
echo "#!/bin/bash" >> syncfileswithnextcloud.sh
echo "" >> syncfileswithnextcloud.sh
echo "sudo chown -R www-data:www-data $2/nextcloud/data/${NEXTCLOUD_ADMIN_USER}/files/Downloads" >> syncfileswithnextcloud.sh
echo "sudo docker exec -i --user www-data ${FOLDER_NAME_FOR_DOCKERCOMPOSE}_nextcloud_1 /var/www/html/occ files:scan --all" >> syncfileswithnextcloud.sh
sudo chmod +x syncfileswithnextcloud.sh

CURRENT_PATH=$(pwd)
sudo crontab -l | { cat; echo "*/5 * * * * ${CURRENT_PATH}/syncfileswithnextcloud.sh"; } | sudo crontab -

echo "### Setup completed! Please verify the console output to make sure there were no errors. ###"